# 在 Python 中，“管道”（Pipeline）是一个抽象概念，
# 本质是将多个步骤或操作串联起来，形成一个数据处理流程，前一步的输出作为后一步的输入，最终完成复杂任务。
# 这种模式能简化代码逻辑、提高可维护性，广泛应用于数据处理、机器学习、进程通信等场景。

# 二、管道的核心优势
# 模块化：每个步骤独立封装，便于单独测试、替换或复用（如替换机器学习管道中的模型）。
# 可读性：流程清晰，一眼可看出数据的处理路径（如 “读取→过滤→转换”）。
# 可维护性：修改某一步骤时，只需调整对应模块，不影响其他步骤。
# 惰性计算：对大数据流，管道可边处理边输出，减少内存占用。

# 三、总结
# Python 中的 “管道” 是串联多个步骤的流程设计模式，而非特定语法：
#
# 在数据处理中，表现为函数 / 生成器的链式调用；
# 在机器学习中，是 Pipeline 类封装的预处理 + 模型流程；
# 在多进程中，是进程间通信的通道（如 subprocess 管道）。
#
# 核心思想是 **“数据流转，步骤分离”**，通过这种模式可简化复杂任务的实现，提升代码质量。